{"ast":null,"code":"// src/store/index.js\nimport { createStore } from 'redux'; // ACTIONS\n\nconst GET_IMAGE = 'GET_IMAGE';\nconst REQUEST_IMAGE = 'REQUEST_IMAGE';\nconst FAILED_REQUEST = 'FAILED_REQUEST';\n\nfunction getImage(json) {\n  return {\n    type: GET_IMAGE,\n    payload: json.message\n  };\n}\n\nfunction requestDog() {\n  return {\n    type: REQUEST_IMAGE\n  };\n}\n\nfunction failedRequest(error) {\n  return {\n    type: FAILED_REQUEST,\n    payload: error\n  };\n}\n\nexport function fetchDog() {\n  return dispatch => {\n    dispatch(requestDog());\n    return fetch('https://dog.ceo/api/breeds/image/random').then(response => response.json()).then(json => dispatch(getImage(json))).catch(error => dispatch(failedRequest(error)));\n  };\n} // REDUCER\n\nconst initialState = {\n  isFetching: false,\n  imagePath: '',\n  error: ''\n};\n\nfunction reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case REQUEST_IMAGE:\n      return { ...state,\n        isFetching: true\n      };\n\n    case GET_IMAGE:\n      return { ...state,\n        imagePath: action.payload,\n        isFetching: false\n      };\n\n    case FAILED_REQUEST:\n      return { ...state,\n        error: action.payload,\n        isFetching: false\n      };\n\n    default:\n      return state;\n  }\n} // STORE\n\n\nconst store = createStore(reducer);\nexport default store;","map":{"version":3,"sources":["/home/tiemi/trybe-exercicios/2-front-end/bloco-15-gerenciamento-de-estado-com-redux/dia-4-usando-o-redux-no-react-actions-assincronas/doguinhos-app/src/store/index.js"],"names":["createStore","GET_IMAGE","REQUEST_IMAGE","FAILED_REQUEST","getImage","json","type","payload","message","requestDog","failedRequest","error","fetchDog","dispatch","fetch","then","response","catch","initialState","isFetching","imagePath","reducer","state","action","store"],"mappings":"AAAA;AACA,SAASA,WAAT,QAA4B,OAA5B,C,CAEA;;AACA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,cAAc,GAAG,gBAAvB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAO;AAAEC,IAAAA,IAAI,EAAEL,SAAR;AAAmBM,IAAAA,OAAO,EAAEF,IAAI,CAACG;AAAjC,GAAP;AACD;;AAED,SAASC,UAAT,GAAsB;AACpB,SAAO;AAAEH,IAAAA,IAAI,EAAEJ;AAAR,GAAP;AACD;;AAED,SAASQ,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,SAAO;AAAEL,IAAAA,IAAI,EAAEH,cAAR;AAAwBI,IAAAA,OAAO,EAAEI;AAAjC,GAAP;AACD;;AAED,OAAO,SAASC,QAAT,GAAoB;AACzB,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACJ,UAAU,EAAX,CAAR;AACA,WAAOK,KAAK,CAAC,yCAAD,CAAL,CACJC,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACX,IAAT,EADb,EAEJU,IAFI,CAECV,IAAI,IAAIQ,QAAQ,CAACT,QAAQ,CAACC,IAAD,CAAT,CAFjB,EAGJY,KAHI,CAGEN,KAAK,IAAIE,QAAQ,CAACH,aAAa,CAACC,KAAD,CAAd,CAHnB,CAAP;AAID,GAND;AAOD,C,CAED;;AACA,MAAMO,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,KADO;AAEnBC,EAAAA,SAAS,EAAE,EAFQ;AAGnBT,EAAAA,KAAK,EAAE;AAHY,CAArB;;AAMA,SAASU,OAAT,GAA+C;AAAA,MAA9BC,KAA8B,uEAAtBJ,YAAsB;AAAA,MAARK,MAAQ;;AAC7C,UAAQA,MAAM,CAACjB,IAAf;AACE,SAAKJ,aAAL;AACE,aAAO,EAAE,GAAGoB,KAAL;AAAYH,QAAAA,UAAU,EAAE;AAAxB,OAAP;;AACF,SAAKlB,SAAL;AACE,aAAO,EAAE,GAAGqB,KAAL;AAAYF,QAAAA,SAAS,EAAEG,MAAM,CAAChB,OAA9B;AAAuCY,QAAAA,UAAU,EAAE;AAAnD,OAAP;;AACF,SAAKhB,cAAL;AACE,aAAO,EAAE,GAAGmB,KAAL;AAAYX,QAAAA,KAAK,EAAEY,MAAM,CAAChB,OAA1B;AAAmCY,QAAAA,UAAU,EAAE;AAA/C,OAAP;;AACF;AACE,aAAOG,KAAP;AARJ;AAUD,C,CAED;;;AACA,MAAME,KAAK,GAAGxB,WAAW,CAACqB,OAAD,CAAzB;AAEA,eAAeG,KAAf","sourcesContent":["// src/store/index.js\nimport { createStore } from 'redux';\n\n// ACTIONS\nconst GET_IMAGE = 'GET_IMAGE';\nconst REQUEST_IMAGE = 'REQUEST_IMAGE';\nconst FAILED_REQUEST = 'FAILED_REQUEST';\n\nfunction getImage(json) {\n  return { type: GET_IMAGE, payload: json.message };\n}\n\nfunction requestDog() {\n  return { type: REQUEST_IMAGE };\n}\n\nfunction failedRequest(error) {\n  return { type: FAILED_REQUEST, payload: error };\n}\n\nexport function fetchDog() {\n  return (dispatch) => {\n    dispatch(requestDog());\n    return fetch('https://dog.ceo/api/breeds/image/random')\n      .then(response => response.json())\n      .then(json => dispatch(getImage(json)))\n      .catch(error => dispatch(failedRequest(error)))\n  };\n}\n\n// REDUCER\nconst initialState = {\n  isFetching: false,\n  imagePath: '',\n  error: '',\n};\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case REQUEST_IMAGE:\n      return { ...state, isFetching: true };\n    case GET_IMAGE:\n      return { ...state, imagePath: action.payload, isFetching: false };\n    case FAILED_REQUEST:\n      return { ...state, error: action.payload, isFetching: false };\n    default:\n      return state;\n  }\n}\n\n// STORE\nconst store = createStore(reducer);\n\nexport default store;"]},"metadata":{},"sourceType":"module"}